'''
<패턴 매칭에 사용되는 알고리즘들>
-고지식한 패턴 검색 알고리즘
-카프-라빈 알고리즘
-KMP 알고리즘
-보이어-무어 알고리즘
'''

'''
1. 고지식한 알고리즘
-본문 문자열을 처음부터 끝까지 차례대로 순회하면서 패턴 내의 문자들을
일일이 비교하는 방식으로 동장
-최악의 경우 시간 복잡도는 텍스트의 모든 위치에서 패턴을 비교해야 하므로
O(MN)이 됨
-길이가 10000인 문자열에서 길이 80인 패턴을 찾는다고 할 때,
최악의 경우 약 10000*80 = 800000 번의 비교가 일어난다.
-비교횟수를 줄일 수 있는 방법은 없는가?
-불일치가 발생한 텍스트 스트링의 앞 부분에 어떤 문자가 있는지를 
미리 알고 있으므로, 불일치가 발생한 앞 부분에 대하여
다시 비교하지 않고 매칭을 수행
-패턴을 전처리하여 배열 next[M]을 구해서 잘못된 시작을 최소화함.
next[M] : 불일치가 발생했을 경우 이동할 다음 위치
-시간 복잡도 : O(M+N)
'''
# 문자를 숫자로 바꾸기


def atoi(s):
    result = 0
    for i in s:
        result = 10 * result + ord(i)-ord('0')
    return result


print(atoi('123'))

# 고지식한 알고리즘

p = 'is'
t = 'this is a book~!'


def BruteForce(p, t):       # BruteForce 함수와 파라미터 p, t
    M = len(p)
    N = len(t)
    i = 0
    j = 0
    while j < M and i < N:  #
        if t[i] != p[j]:
            i = i - j
            j = -1
        i = i + 1
        j = j + 1
    if j == M:
        return i - M
    else:
        return -1


print(BruteForce(p, t))

p = 'ab'    # 찾을 패턴
t = 'aaaabaaaabaaaab'   # 전체 문장
M = len(p)
N = len(t)


def bf(p, t, N, M):
    i = 0   # t에서의 비교위치
    j = 0   # p에서의 비교위치
    while i < N and j < M:  # 비교할 문장이 남아있고, 패턴을 찾기 전이면
        if t[i] == p[j]:
            i += 1
            j += 1
        else:
            i = i - j + 1
            j = 0
        # if t[i] != p[j]:    # 서로 다른 글자를 만나면
        #     i -= j          # 비교를 시작한 위치로
        #     j = -1          # 패턴의 시작 전으로
        # i += 1
        # j += 1
    if j == M:
        return i - M
    else:
        return -1


def bf2(p, t, N, M):
    for i in range(N-M+1):
        for j in range(M):
            if t[i+j] != p[j]:
                break
        else:
            return i
    return -1


print(bf(p, t, N, M))

'''
2. KMP 알고리즘
-테스트에서 abcdabc까지는 매치되고, e에서 실패한 상황 패턴의
맨 앞에 abc와 실패 직전의 abc는 동일함을 알 수 있다.
-실패한 텍스트 문자와 P[4]를 비교한다.
-매칭이 실패했을 때 돌아갈 곳을 계산한다.
-패턴의 각 위치에 대해 매칭에 실패했을 때 돌아갈 곳을 준비해 둔다.
'''
t = 'ABAACAACDAABAABA'
p = 'AABA'

'''
3. 보이어-무어 알고리즘
-오른쪽에서 왼쪽으로 비교
-대부분의 상용 소프트웨어에서 채택하고 있는 알고리즘
-보이어-무어 알고리즘은 패턴에 오른쪽 끝에 있는 문자가 불일치 하고 이 문자가
패턴 내에 존재하지 않는 경우, 이동 거리는 무려 패턴의 길이 만큼이 된다.
-오른쪽 끝에 있는 문자가 불일치 하고 이 문자가 패턴 내에 존재할 경우
3.1 문자열 매칭 알고리즘 비교
-찾고자 하는 문자열 패턴의 길이 m, 총 문자열 길이 n
-고지식한 패턴 검색 알고리즘 : 수행시간 O(mn)
-카프-라빈 알고리즘 : 수행시간 O(n)
-KMP 알고리즘 : 수행시간 O(n)
-앞의 두 매칭 알고리즘들의 공통점 텍스트 문자열의 문자를 적어도 한번씩
훑는다는 것이다. 따라서 최선의 경우에도 O(N)
-보이어-무어 알고리즘은 텍스트 문자를 다 보지 않아도 된다.
-발상의 전환 : 패턴의 오른쪽부터 비교한다.
'''
